#This is the file for the regular expression patterns and substitutions for 
#C++ Syntax, which will be used in sed utility for replacement.

#Each line would contain a pair of pattern and substitution. No spaces before
#and after each line, otherwise they will be treated as part of pattern

#Sometimes the order of the pairs does matter

#Pattern and substitution should be seperated by tabs and/or blank spaces.
#If the seperator only contains blank spaces, it should be at least two.
#Which means, it should match with / {2,}| *\t[ \t]*/

#Any lines begin with # will be ignored as comment
#Any empty lines which only contains tabs and/or blank spaces will be ignored

#Since & is used for backreference of whole matched string, if & appears in substitution,
#it should use \ to escape it.



#Quotation  Lazy mode: ""|".*?[^\\](\\\\)*"
"([^\\"]|\\[^"]|[^\\]?(\\\\)*\\")*"        <span class="quote">&</span>

#C++ style comment
//.*        <span class="comment">&</span>
#C style comment. Lazy mode: /\*.*?\*/
/\*.?([^\*]|[^*]/)*\*/       <span class="comment">&</span>

#Preprocessor directives
^[ \t]*#[ \t]*[[:alnum:]]*        <span class="preprocessor">&</span>

#Keyword    The last = is used to exclude "class=" in substitutions
(^|[^A-Za-z0-9_])(break|case|catch|class|const_cast|const|continue|default|delete|do|double|dynamic_cast|else[ \t]+if|else|enum|explicit|extern|for|friend|goto|if|inline|mutable|namespace|new|operator|private|protected|public|register|reinterpret_cast|return|sizeof|static_cast|static|struct|switch|template|this|throw|try|typedef|typeid|typename|union|using[ \t]+namespace|using|virtual|void|volatile|while)($|[^A-Za-z0-9_=])      \1<span class="keyword">\2</span>\3
#Built-in type
(^|[^A-Za-z0-9_])(unsigned[ \t]+|signed[ \t]+)?(bool|char|double|float|int|short[ \t]+int|short|long[ \t]+long[ \t]+int|long[ \t]+long|long|size_t)($|[^A-Za-z0-9_])     \1<span class="builtintype">\2\3</span>\4
#C++ standard library
(^|[^A-Za-z0-9_])(std[ \t]*::[ \t]*)?(i?o?stream|[io]?fstream|[io]?stringstream|string|vector|list|deque|list|stack|priority_queue|queue|bitset|multiset|set|multimap|map|cin|cout|clog|endl)($|[^A-Za-z0-9_])       \1<span class="stdlib">\2\3</span>\4
#C standard library
([^A-Za-z0-9_ \t])(cassert|cctype|cerrno|cfloat|ciso646|climits|clocale|cmath|csetjmp|csignal|cstdarg|cstddef|cstdio|cstdlib|cstring|ctime|assert.h|type.h|errno.h|float.h|iso646.h|limits.h|loale.h|math.h|setjmp.h|signal.h|stdarg.h|stddef.h|stdio.h|stdlib.h|string.h|time.h)([^A-Za-z0-9_ \t])     \1<span class="stdlib">\2</span>\3

#rvalue - right value
#Number
([^A-Za-z0-9_])(0[Xx][0-9A-Fa-f]+|[0-9]+\.?[0-9]*|[0-9]*\.[0-9]+)((e[+-]?[0-9]+)?[LlUuFf]?[Ll]?)([^A-Za-z0-9_])       \1<span class="number">\2\3</span>\5
#Boolean value
([^A-Za-z0-9_])(false|true)([^A-Za-z0-9_])      \1<span class="boolean">\2</span>\3
#Character      The last three is used to quote the encoded characters
'(\\[\\abfnrt'"]|[^'\\]|\\x[0-9a-fA-F]{2}|&(amp|lt|gt);)'     <span class="character">&</span>



